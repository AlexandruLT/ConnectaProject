@model ConnectaProject.Models.DepartementViewModel

@using (Html.BeginForm(null, null, FormMethod.Post, new { style = "padding-top:65px", id="Department", @class = "HtmlForm"}))
{
    @Html.AntiForgeryToken()

    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel">
                    @{
                        @ViewBag.Message
                    }
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">

                    @Html.HiddenFor(model => model.DepartmentKey)

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @{ 
                        var officeList = ViewData["namesList"] as Dictionary<int, string>;
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.OfficeName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.OfficeKey, new SelectList(officeList.Select(x => new {Value = x.Key, Text = x.Value }), "Value", "Text" ), new { htmlAttributes = new { style = "width:100%" } })
                            @Html.ValidationMessageFor(model => model.OfficeName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ResponsibleKey, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ResponsibleKey, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ResponsibleKey, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
                        <input type="submit" class="btn btn-primary waves-effect waves-light" id="confirmok1" value="Save changes" />
                    </div>
                </div>
            </div>

        </div>
    </div>
}

<script src="@Url.Content("~/Scripts/js/ModalPartial.js")" type="text/javascript"></script>